<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFrameworks>netcoreapp2.0;net471</TargetFrameworks>
    <PackageType>DotNetCliTool</PackageType>
    <AssemblyName>dotnet-threax-modelgen</AssemblyName>
    <PackageId>Threax.ModelGen</PackageId>
    <Version>4.1.0</Version>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <Authors>Andrew Piper</Authors>
    <PackageLicenseUrl>https://github.com/threax/Threax.AspNetCore.Hypermedia/blob/master/LICENSE</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/threax/Threax.AspNetCore.Hypermedia</PackageProjectUrl>
    <RepositoryUrl>https://github.com/threax/Threax.AspNetCore.Hypermedia</RepositoryUrl>
    <PackageReleaseNotes>Fixed camel case conversion.
Version 4+ will generate test functions for creating objects in another file. To update erase the functions that are added to ModelTests.Generated.cs from your ModelTests.cs file. This way the model generator can update these definitions as the model changes.</PackageReleaseNotes>
  </PropertyGroup>
  
  <ItemGroup>
    <PackageReference Include="Microsoft.Extensions.Configuration" Version="1.1.2" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Binder" Version="1.1.2" />
    <PackageReference Include="Microsoft.Extensions.Configuration.CommandLine" Version="1.1.2" />
    <PackageReference Include="NJsonSchema" Version="9.10.10" />
    <PackageReference Include="System.IO.FileSystem.Primitives" Version="4.3.0" />
    <PackageReference Include="System.Text.Encoding.Extensions" Version="4.3.0" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'netcoreapp2.0' ">
    <ProjectReference Include="..\Threax.AspNetCore.Models\Threax.AspNetCore.Models.csproj" />
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net471' ">
    <ProjectReference Include="..\Threax.AspNetCore.Models\Threax.AspNetCore.Models.csproj">
      <IncludeAssets>All</IncludeAssets>
    </ProjectReference>
    <Reference Include="Microsoft.CSharp" />
  </ItemGroup>

  <PropertyGroup Condition=" '$(TargetFramework)' == 'net471' ">
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);IncludeFullFrameworkDependencies</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>

  <Target Name="IncludeFullFrameworkDependencies">
    <ItemGroup>
      <BuildOutputInPackage Include="$(OutputPath)*.dll" />
    </ItemGroup>
  </Target>
  
</Project>